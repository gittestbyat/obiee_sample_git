<?xml version="1.0" encoding="utf-8"?>
<saw:report xmlns:saw="com.siebel.analytics.web/report/v1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlVersion="201201160" xmlns:sawx="com.siebel.analytics.web/expression/v1.1"><saw:criteria xsi:type="saw:simpleCriteria" subjectArea="&quot;A - Sample Sales&quot;" withinHierarchy="true"><saw:columns><saw:column xsi:type="saw:regularColumn" columnID="ca4211ddd0c1aca23"><saw:columnFormula><sawx:expr xsi:type="sawx:sqlExpression">&quot;Products&quot;.&quot;P3  LOB&quot;</sawx:expr></saw:columnFormula><saw:displayFormat><saw:formatSpec suppress="suppress" wrapText="true" interaction="none"/></saw:displayFormat><saw:columnHeading><saw:displayFormat><saw:formatSpec/></saw:displayFormat></saw:columnHeading></saw:column><saw:column xsi:type="saw:regularColumn" columnID="c34c074d7d96ec712"><saw:columnFormula><sawx:expr xsi:type="sawx:sqlExpression">&quot;Time&quot;.&quot;T03 Per Name Qtr&quot;</sawx:expr></saw:columnFormula><saw:displayFormat><saw:formatSpec suppress="suppress" wrapText="true" interaction="none"/></saw:displayFormat><saw:tableHeading><saw:caption fmt="text"><saw:text>Offices</saw:text></saw:caption></saw:tableHeading><saw:columnHeading><saw:caption fmt="text"><saw:text>Dim2</saw:text></saw:caption><saw:displayFormat><saw:formatSpec/></saw:displayFormat></saw:columnHeading></saw:column><saw:column xsi:type="saw:regularColumn" columnID="c1cf5e8afe39ed9bf"><saw:columnFormula><sawx:expr xsi:type="sawx:sqlExpression">&quot;Base Facts&quot;.&quot;1- Revenue&quot;</sawx:expr></saw:columnFormula><saw:displayFormat><saw:formatSpec suppress="repeat" wrapText="true" interaction="none"><saw:dataFormat xsi:type="saw:number" minDigits="2" maxDigits="2" commas="false" negativeType="minus"/></saw:formatSpec></saw:displayFormat><saw:tableHeading><saw:caption fmt="text"><saw:text>Base Facts</saw:text></saw:caption></saw:tableHeading><saw:columnHeading><saw:displayFormat><saw:formatSpec/></saw:displayFormat><saw:caption fmt="text"><saw:text>Metric</saw:text></saw:caption></saw:columnHeading></saw:column></saw:columns></saw:criteria><saw:views currentView="2"><saw:view xsi:type="saw:compoundView" name="compoundView!1"><saw:cvTable><saw:cvRow><saw:cvCell viewName="titleView!1"><saw:displayFormat><saw:formatSpec borderColor="#999999" borderPosition="8"/></saw:displayFormat></saw:cvCell></saw:cvRow><saw:cvRow><saw:cvCell viewName="narrativeView!1"><saw:displayFormat><saw:formatSpec/></saw:displayFormat></saw:cvCell></saw:cvRow></saw:cvTable></saw:view><saw:view xsi:type="saw:titleView" name="titleView!1" includeName="false" startedDisplay="none"><saw:title><saw:caption fmt="text"><saw:text>Master Report</saw:text></saw:caption></saw:title><saw:subTitle><saw:caption fmt="text"><saw:text>Select a cell from the heatmap below</saw:text></saw:caption></saw:subTitle></saw:view><saw:view xsi:type="saw:narrativeView" name="narrativeView!1"><saw:prefix><saw:caption fmt="html"><saw:text>&lt;script type=&quot;text/javascript&quot; src=&quot;/analyticsRes/d3/d3.v3.js&quot;&gt;&lt;/script&gt;              
&lt;script src=&#39;/analyticsRes/SampleApp/customjs/SAutilsv1.3.js&#39;&gt;&lt;/script&gt;

 &lt;div id=&quot;heat_chart&quot;&gt;&lt;/div&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
data=[];</saw:text></saw:caption></saw:prefix><saw:narrative rowCount="300"><saw:caption fmt="html"><saw:text>data.push([&quot;@{ca4211ddd0c1aca23}&quot;,&quot;@{c34c074d7d96ec712}&quot;,&quot;@{c1cf5e8afe39ed9bf}&quot;]);</saw:text></saw:caption></saw:narrative><saw:postfix><saw:caption fmt="html"><saw:text>
var margin = { top: 30, right: 0, bottom: 0, left: 60},
          width = @{Width}{700}- margin.left - margin.right,
          height =@{Height}{1200} - margin.top - margin.bottom,		  
          buckets = 1000000,
          colors = [@{Quan0}{&quot;#FA8E54&quot;,&quot;#F2C05C&quot;,&quot;#F3EC5B&quot;,&quot;#ABD8EB&quot;,&quot;#A8EEAD&quot;,&quot;#4FF040&quot;}],
          dim2arr = new Array(),
          heats = new Array(),
          dim1arr = new Array(),
          maxValue = 0,
          minValue = 0;  

    data.forEach(function(row, rowNo, rows) {
if(rowNo == 0 ) {
minValue = Number(row[2]);
maxValue = Number(row[2]);
}
      var dim1 = row[0];

      if (dim1arr.indexOf(dim1) &lt; 0 ){
        dim1arr.push(dim1);			
      }
      var dim2 = row[1];
	  
      if (dim2arr.indexOf(dim2) &lt; 0 ){
        dim2arr.push(dim2);					
      }

      var heat = row[2];

      heats.push(Number(heat));
      

      if (Number(heat) &lt; Number(minValue)){
        minValue = Number(heat);	
      }

      if (Number(heat) &gt; Number(maxValue)){
        maxValue = Number(heat);		
      }

    });

      var  gridWidth = (Math.floor(width / dim1arr.length))/1.3,
         gridHeight = (Math.floor(height / dim2arr.length))/2.5,
         legendElementWidth = gridWidth/1.75;


      var colorScale = d3.scale.quantile()
              .domain([minValue, maxValue])
//		.domain([0, buckets - 1, d3.max(data, function (d) { return d.value; })])
              .range(colors);

d3.range(9)

    var chartContainer = d3.select(&quot;#heat_chart&quot;).append(&quot;div&quot;).attr(&quot;id&quot;,&quot;chart&quot;);
          var svg = d3.select(&quot;#chart&quot;).append(&quot;svg&quot;)
              .attr(&quot;width&quot;, width + margin.left + margin.right)
              .attr(&quot;height&quot;, height + margin.top + margin.bottom)
              .append(&quot;g&quot;)
              .attr(&quot;transform&quot;, &quot;translate(&quot; + margin.left + &quot;,&quot; + margin.top + &quot;)&quot;);     

            
     var dim2Labels = svg.selectAll(&quot;.dim2Label&quot;)
              .data(dim2arr)
              .enter().append(&quot;text&quot;)
                .text(function (d) { return d; })
                .attr(&quot;x&quot;, 0)
                .attr(&quot;y&quot;, function (d, i) { return i * gridHeight+6; })
                .style(&quot;text-anchor&quot;, &quot;end&quot;)
                .attr(&quot;transform&quot;, &quot;translate(-6,&quot; + gridHeight / 2 + &quot;)&quot;)
        .attr(&quot;font-weight&quot;, function(d){ return &quot;bold&quot;; })
                .attr(&quot;font-size&quot;, &quot;10px&quot;);  ;
    
 
     var dim1Labels = svg.selectAll(&quot;.dim1Label&quot;)
              .data(dim1arr)
              .enter().append(&quot;text&quot;)
                .text(function(d) { console.log(&quot;vik:&quot; + d);
                                     return d;})
                .attr(&quot;x&quot;, function (d, i) { return i * gridWidth; })
                .attr(&quot;y&quot;, function (d, i) { return 0;/*if(i%2 == 0) return 0; else return -20*/ })
                .style(&quot;text-anchor&quot;, &quot;middle&quot;)
                .attr(&quot;transform&quot;, &quot;translate(&quot; + gridWidth / 2 + &quot;, -6)&quot;)
  //              .attr(&quot;class&quot;, function(d, i) { return &quot;dim1Label mono axis axis-dim1&quot;; })
        .attr(&quot;font-weight&quot;, function(d){ return &quot;bold&quot;; })
                .attr(&quot;font-size&quot;, &quot;10px&quot;);




     var heatMap = svg.selectAll(&quot;.hour&quot;)
              .data(data)
              .enter().append(&quot;g&quot;);
 
       var heatMapRect = heatMap.append(&quot;rect&quot;)
              .attr(&quot;x&quot;, function(d) { return ( dim1arr.indexOf(d[0])) * gridWidth; })
              .attr(&quot;y&quot;, function(d) { return (dim2arr.indexOf(d[1])) * gridHeight; })
              .attr(&quot;rx&quot;, 4)
              .attr(&quot;ry&quot;, 4)
              .attr(&quot;class&quot;, &quot;bordered&quot;)
              .attr(&quot;width&quot;, gridWidth/1.01)
              .attr(&quot;height&quot;, gridHeight/1.01)
              .style(&quot;fill&quot;, &quot;#ffffff&quot;);


       heatMap.append(&quot;text&quot;)
       .text(function(d){ return toUSD(Math.round(d[2]));  })
        .attr(&quot;x&quot;, function(d) {  return ( dim1arr.indexOf(d[0])) * gridWidth; })
        .attr(&quot;y&quot;, function(d) { return (dim2arr.indexOf(d[1])) * gridHeight + 25; } )
        .attr(&quot;dx&quot;, 15)
         .style(&quot;cursor&quot;, function(d) {  return &quot;pointer&quot;; })
        .attr(&quot;font-size&quot;, function(d){ return &quot;10px&quot;})
        .attr(&quot;font-weight&quot;, function(d){ return &quot;normal&quot;; });

       heatMap.on(&quot;click&quot;,function(d){sendEvent(d)}) ;

      heatMapRect.transition().duration(30)
                .style(&quot;cursor&quot;, function(d) {  return &quot;pointer&quot;; })
                .style(&quot;fill&quot;, function(d) {  return colorScale(d[2]); });


function toUSD(number) {
    var number = number.toString(), 
    dollars = number.split(&#39;.&#39;)[0], 
    cents = (number.split(&#39;.&#39;)[1] || &#39;&#39;) +&#39;00&#39;;
    dollars = dollars.split(&#39;&#39;).reverse().join(&#39;&#39;)
        .replace(/(\d{3}(?!$))/g, &#39;$1,&#39;)
        .split(&#39;&#39;).reverse().join(&#39;&#39;);
    return &#39;$&#39; + dollars;  /* + &#39;.&#39; + cents.slice(0, 2);  */
}

function sendEvent(d) {
   var v=[&#39;&quot;Products&quot;.&quot;P3  LOB&quot;&#39;, d[0], &#39;&quot;Time&quot;.&quot;T03 Per Name Qtr&quot;&#39;, d[1]];
   SAutils.publishMDEvent(&#39;MD&#39;,v);
}
    
&lt;/script&gt;</saw:text></saw:caption></saw:postfix></saw:view></saw:views><saw:prompts scope="report" subjectArea="&quot;A - Sample Sales&quot;"/></saw:report>